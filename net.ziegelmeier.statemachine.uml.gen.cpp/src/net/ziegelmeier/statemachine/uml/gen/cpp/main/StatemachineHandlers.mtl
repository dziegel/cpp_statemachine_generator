[comment encoding = UTF-8 /]
[module StatemachineHandlers('http://www.eclipse.org/uml2/5.0.0/UML')]

[import net::ziegelmeier::statemachine::uml::gen::cpp::main::StatemachineQueries/]

[template public generateHandlers(aStatemachine : StateMachine)]
[file (aStatemachine.name.concat('Handlers.hxx'), false, 'UTF-8')]
// Statemachine [aStatemachine.name/] handlers
// Include this file in .cxx or in .hxx below Owner declaration

#pragma once

// Override the following defines according to your needs if you are not using cpp_event_framework:

#ifndef [aStatemachine.name/]_GET_INSTANCE_EVENT_ID
#define [aStatemachine.name/]_GET_INSTANCE_EVENT_ID(event_instance) event_instance->Id()
#endif

#ifndef [aStatemachine.name/]_GET_STATIC_EVENT_ID
#define [aStatemachine.name/]_GET_STATIC_EVENT_ID(event_name) event_name::kId
#endif

[aStatemachine.region.generateRegion(aStatemachine)/]
[/file]
[/template]

[comment --------------------------------------------------- /]

[template private generateRegion(aRegion : Region, aStatemachine : StateMachine)]
[aRegion.eContents(Vertex).generateVertex(aStatemachine)/]
[/template]

[template private generateVertex(aState : Vertex, aStatemachine : StateMachine)]
[/template]

[template private generateVertex(aState : State, aStatemachine : StateMachine)]
// State [aState.name/]
[let aFunctionName : String = aStatemachine.name + aState.name + 'Handler']
[aStatemachine.getTransitionType()/] [aStatemachine.getOwnerType()/]::[aFunctionName/]([aStatemachine.getStatePtrType()/] /* state */, [aStatemachine.getEventType()/] event)
{
    switch([aStatemachine.name/]_GET_INSTANCE_EVENT_ID(event))
    {
    [let allEvents : Set(Event) = aState.outgoing->collect(getEvent())->asSet()]
    [for (anEvent : Event | allEvents)]
    case [aStatemachine.name/]_GET_STATIC_EVENT_ID([anEvent.name/]):
    [let allTransitions : Sequence(Transition) = aState.outgoing->select(t | t.getEvent().name = anEvent.name)->asSequence()->sortedBy(guard.oclIsUndefined() or (guard.name = 'else'))]
    [for (aTrans : Transition | allTransitions)]
        [aTrans.generateTransition(aTrans, aStatemachine)/]
    [/for]
    [/let]
    [/for]
    [/let]
    default:
        return [aStatemachine.name/]::UnhandledEvent();
    }
}
[/let]

[aState.eContents(Region).generateRegion(aStatemachine)/]
[/template]

[template private generateTransition(aTransition : Transition, aStartTransition : Transition, aStatemachine : StateMachine)]
[if (aTransition.target.oclIsKindOf(State))]
[if (aTransition.guard.oclIsUndefined() or (aTransition.guard.name = 'else'))]
return [aStatemachine.name/]::[aTransition.getTransitionVariable(aStartTransition)/];
[else]
if ([aTransition.guard.name/])
{
    return [aStatemachine.name/]::[aTransition.getTransitionVariable(aStartTransition)/];
}
[/if]
[elseif (aTransition.target.oclIsTypeOf(Pseudostate) and aTransition.target.oclAsType(Pseudostate).kind = PseudostateKind::choice)]
[if (not aTransition.guard.oclIsUndefined() and not (aTransition.guard.name = 'else'))]
if ([aTransition.guard.name/])
{
    [generateTransitionRecursive(aStartTransition, aStatemachine)/]
}
[else]
[generateTransitionRecursive(aStartTransition, aStatemachine)/]
[/if]
[/if]
[/template]

[template private generateTransitionRecursive(aTransition : Transition, aStartTransition : Transition, aStatemachine : StateMachine) post (trim())]
[aTransition.target.oclAsType(Pseudostate).outgoing->asSequence()->sortedBy(guard.oclIsUndefined() or (guard.name = 'else')).generateTransition(aStartTransition, aStatemachine)/]
[/template]
