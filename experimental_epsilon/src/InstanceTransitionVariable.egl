[%
  import "Operations.egl";

  var transitionVariableTemplate : Template = TemplateFactory.load("InstanceTransitionVariable.egl");

  if (transition.effect != null) {
    actions.add("&" + sm.name + "::Impl::" + transition.effect.name);
  }

  if (transition.target.isState()) {
    if (not actions.isEmpty()) {
%]
const [%=sm.name%]::Transition::ActionType [%=sm.name%]::[%=transition.getVariableName(start_transition)%]Actions[] = {[%=actions.concat(", ")%]};
const [%=sm.name%]::Transition [%=sm.name%]::[%=transition.getVariableName(start_transition)%]([%=transition.target.getVariableName()%], [%=transition.getVariableName(start_transition)%]Actions);
[%
    } else {
%]
const [%=sm.name%]::Transition [%=sm.name%]::[%=transition.getVariableName(start_transition)%]([%=transition.target.getVariableName()%]);
[%
    }
  } else if (transition.target.isChoiceState()) {
    for (outgoing_transition in transition.target.getOutgoingTransitions()) {
    transitionVariableTemplate.populate("actions", actions);
    transitionVariableTemplate.populate("start_transition", start_transition);
    transitionVariableTemplate.populate("transition", outgoing_transition);
    transitionVariableTemplate.populate("state", state);
    transitionVariableTemplate.populate("sm", sm);
%]
[%=transitionVariableTemplate.process()%]
[%
    }
  }
%]