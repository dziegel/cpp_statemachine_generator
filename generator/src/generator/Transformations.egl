[%
operation Tuple transformStatemachine() {
  self.transition_type = "Transition";
  self.transition_action_type = "Transition::ActionContainer";
  self.state_type = "State";
  self.history_state_type = "HistoryState";
  self.event_type = "Event";
  self.impl_type = "Impl";
  self.impl_ptr_type = "ImplPtr";
  
  self.all_states = new Map();
  self.all_actions = new List();
  self.all_guards = new List();
  self.all_entry_exit = new List();
  
  self.region.transformRegionStates(self, null);
  self.region.transformRegionTransitions(self, null);
  
  self.all_actions = self.all_actions.sortBy(a | a);
  self.all_guards = self.all_guards.sortBy(g | g);
  self.all_entry_exit = self.all_entry_exit.sortBy(e | e);
}

operation Tuple transformRegionStates(statemachine : Tuple, parent_state : Tuple) {
  self.states = self.states.sortBy(s | s.name);
  for (state in self.states) {
    state.transformState(statemachine, self, parent_state);

 	if (state.region.isDefined()) {
      state.region.transformRegionStates(statemachine, state);
  	}
  }
}

operation Tuple transformRegionTransitions(statemachine : Tuple, parent_state : Tuple) {
  var initial = statemachine.all_states.get(self.initial_id);
  self.initial_variable_name = initial.variable_name;

  for (state in self.states) {
 	if (state.region.isDefined()) {
      state.region.transformRegionTransitions(statemachine, state);
  	}

    state.transformTransitions(statemachine);
  }
}

operation Tuple transformState(statemachine : Tuple, region : Tuple, parent_state : Tuple) {
  statemachine.all_states.put(self.id, self);

  if (parent_state.isDefined()) {
    self.scoped_name = parent_state.scoped_name + self.name;
    self.readable_scoped_name = parent_state.readable_scoped_name + "::" + self.name;
  } else {
    self.scoped_name = self.name;
    self.readable_scoped_name = self.name;
  }
  self.variable_name = "k" + self.scoped_name;

  self.state_type = statemachine.state_type;
  if((region.initial_id = self.id) and region.initial_history) {
    self.state_type = statemachine.history_state_type;
  }

  self.parent_variable_pointer = "nullptr";
  if (self.parent_state_id.isDefined()) {
    var parent = statemachine.all_states.get(self.parent_state_id);
    self.parent_variable_pointer = "&" + parent.variable_name;
  }
  
  self.entry_pointer = "nullptr";
  if (self.entry.isDefined()) {
    self.entry_pointer = "&Impl::" + self.entry;
    if (not statemachine.all_entry_exit.includes(self.entry)) {
      statemachine.all_entry_exit.add(self.entry);
    }
  }

  self.exit_pointer = "nullptr";
  if (self.exit.isDefined()) {
    self.exit_pointer = "&Impl::" + self.exit;
    if (not statemachine.all_entry_exit.includes(self.exit)) {
      statemachine.all_entry_exit.add(self.exit);
    }
  }
}

operation Tuple transformTransitions(statemachine : Tuple) {
  self.initial_variable_pointer = "nullptr";
  if (self.region.isDefined()) {
    self.initial_variable_pointer = "&" + self.region.initial_variable_name;
  }

  for (transition in self.transitions) {
    transition.transformTransition(statemachine);
  }
  self.transitions = self.transitions.sortBy(t | t.trigger + "-" + t.priority + "-" + t.start + t.target_state_id);

  self.all_events = new List();  
  for (transition in self.transitions) {
    if (not self.all_events.includes(transition.trigger)) {
      self.all_events.add(transition.trigger);
    }
  }
  self.all_events = self.all_events.sortBy(e | e);

  self.all_event_transitions = new Map();
  for (event in self.all_events) {
    self.all_event_transitions.put(event, self.transitions.select(t | t.trigger = event));
  }
}

operation Tuple transformTransition(statemachine : Tuple) {
  if (self.internal) {
    self.target_variable_name = "kNone";
  } else {
    var target = statemachine.all_states.get(self.target_state_id);
    self.target_variable_name = target.variable_name;
  }
  
  var actions = new List();
  for (action in self.actions) {
    actions.add("&" + statemachine.impl_type + "::" + action);
    if (not statemachine.all_actions.includes(action)) {
      statemachine.all_actions.add(action);
    }
  }
  self.actions_list = actions.concat(", ");

  var guards = new List();
  for (guard in self.guards) {
    guards.add("impl->" + guard + "(event)");
    if (not statemachine.all_guards.includes(guard)) {
      statemachine.all_guards.add(guard);
    }
  }
  self.has_guard = not guards.isEmpty();
  if (self.has_guard) {
    self.priority = 0;
    self.guards_list = guards.concat(" && ");
  } else {
    self.priority = 9999999;
    self.guards_list = "true";
  }
}
%]