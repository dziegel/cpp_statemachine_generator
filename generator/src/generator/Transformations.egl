[%
operation Tuple transformStatemachine() {
  self.transition_type = "Transition";
  self.transition_action_type = "Transition::ActionType";
  self.state_type = "State";
  self.history_state_type = "HistoryState";
  self.event_type = "Event";
  self.impl_type = "Impl";
  self.impl_ptr_type = "ImplPtr";
  
  self.all_states = new Map();
  self.all_actions = new List();
  self.all_guards = new List();
  self.all_entry_exit = new List();
  
  self.region.regionCollectStates(self, null);
  self.region.regionTransform(self, null);
  
  self.all_actions = self.all_actions.sortBy(a | a);
  self.all_guards = self.all_guards.sortBy(g | g);
  self.all_entry_exit = self.all_entry_exit.sortBy(e | e);
}

operation Tuple regionCollectStates(statemachine : Tuple, parent_state : Tuple) {
  self.states = self.states.sortBy(s | s.name);
  
  for (state in self.states) {
    statemachine.all_states.put(state.id, state);

    // State variable name
    if (parent_state != null) {
      state.scoped_name = parent_state.scoped_name + state.name;
      state.readable_scoped_name = parent_state.readable_scoped_name + "::" + state.name;
    } else {
      state.scoped_name = state.name;
      state.readable_scoped_name = state.name;
    }
    state.variable_name = "k" + state.scoped_name;

    if (state.region != null) {
      state.region.regionCollectStates(statemachine, state);
  	}
  }
}

operation Tuple regionTransform(statemachine : Tuple, parent_state : Tuple) {
  // Transform states
  for (state in self.states) {
    state.stateTransform(statemachine, self, parent_state);
  }

  // Handle history state type
  if(self.initial_history) {
    parent_state.state_type = statemachine.history_state_type;
  }

  // Initial variable name
  var initial = statemachine.all_states.get(self.initial_state_id);
  if (initial == null) {
    ("Unable to find state id " + self.initial_state_id).println();
  }
  self.initial_variable_name = initial.variable_name;
}

operation Tuple stateTransform(statemachine : Tuple, region : Tuple, parent_state : Tuple) {
  self.transitions_for_trigger_transformed = new Map();
//  if ((self.region == null) and self.transitions.isEmpty()) {
//    (statemachine.name + ": No outgoing transitions for state " + self.name).println();
//  }

  // State type
  self.state_type = statemachine.state_type;

  // Parent state
  self.parent_variable_pointer = "nullptr";
  if (self.parent_state_id.isDefined()) {
    var parent = statemachine.all_states.get(self.parent_state_id);
    self.parent_variable_pointer = "&" + statemachine.name + "::" + parent.variable_name;
  }
  
  // Entry action
  self.entry_pointer = "nullptr";
  if (self.entry.isDefined()) {
    if (self.entry == "") {
      (sm.name + ": Empty entry function in state " + self.name).println();
    }
    self.entry_pointer = "&" + statemachine.name + "::" + "Impl::" + self.entry;
    if (not statemachine.all_entry_exit.includes(self.entry)) {
      statemachine.all_entry_exit.add(self.entry);
    }
  }

  // Exit action
  self.exit_pointer = "nullptr";
  if (self.exit.isDefined()) {
    if (self.exit == "") {
      (sm.name + ": Empty exit function in state " + self.name).println();
    }
    self.exit_pointer = "&" + statemachine.name + "::" + "Impl::" + self.exit;
    if (not statemachine.all_entry_exit.includes(self.exit)) {
      statemachine.all_entry_exit.add(self.exit);
    }
  }

  // Initial state
  self.initial_variable_pointer = "nullptr";
  if (self.region != null) {
    // Transform subregion of state
    self.region.regionTransform(statemachine, self);

    // Initial state
    self.initial_variable_pointer = "&" + statemachine.name + "::" + self.region.initial_variable_name;
  }

  // Collect all events
  self.all_events = new List();
  for (trigger in self.transitions_for_trigger.keySet()) {
    if (not self.all_events.includes(trigger)) {
      self.all_events.add(trigger);
    }
  }
  self.all_events = self.all_events.sortBy(e | e);

  // Transform transitions of state
  for (trigger in self.transitions_for_trigger.keySet()) {
    var transitions = new Tuple();
    transitions.trans_conditional = new List();
    transitions.trans_unconditional = new List();

	for (transition in self.transitions_for_trigger.get(trigger)) {
      transition.transitionTransform(statemachine, self, trigger);
      
      if (not transition.guards.isEmpty()) {
        transitions.trans_conditional.add(transition);
      } else {
        transitions.trans_unconditional.add(transition);
      }
	}
    if (transitions.trans_unconditional.size() > 1) {
      ("More than one unconditional transition in state " + self.name + " for trigger " + trigger).println();
    }
    
    self.transitions_for_trigger_transformed.put(trigger, transitions);
  }
}

operation Tuple transitionTransform(statemachine : Tuple, state : Tuple, trigger: String) {
  self.trans_conditional = new List();
  self.trans_unconditional = new List();
  self.actions_list = "";
  self.guards_list = "";
  self.target_variable_name = null;

  // Collect all actions
  var actions = new List();
  for (action in self.actions) {
    actions.add("impl->" + action + "(event)");
    if (not statemachine.all_actions.includes(action)) {
      if (action == "") {
        (sm.name + ": Empty function behavior in transition starting from state " + self.start).println();
      }
      statemachine.all_actions.add(action);
    }
  }
  if (not actions.isEmpty()) {
    self.actions_list = actions.concat("; ") + ";";
  }
  
  // Collect all guards and create guards_list
  var guards = new List();
  for (guard in self.guards) {
    guards.add("impl->" + guard + "(event)");
    if (not statemachine.all_guards.includes(guard)) {
      statemachine.all_guards.add(guard);
    }
  }
  self.guards_list = guards.concat(" && ");

  // Transition has a target state
  if(not self.internal and (self.target_state_id != null)) {
    var target = statemachine.all_states.get(self.target_state_id);
    if (target == null) {
    	("Unable to find state id " + self.target_state_id).println();
    }
    self.target_variable_name = target.variable_name;
  }
  
  // Transform subtransitions (choice/junction)
  for (transition in self.all_transitions) {
    transition.transitionTransform(statemachine, state, trigger);
      
    if (not transition.guards.isEmpty()) {
      self.trans_conditional.add(transition);
    } else {
      self.trans_unconditional.add(transition);
    }
  }
  if (self.trans_unconditional.size() > 1) {
    ("More than one unconditional transition in state " + self.name + " for trigger " + trigger).println();
  }
}
%]