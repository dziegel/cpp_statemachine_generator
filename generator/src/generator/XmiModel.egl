[%
// Parse model and transform it to model-independent Tuples (TODO: Use Emfatic)

operation StateMachine getModel() : Tuple {
  var result = new Tuple();
  result.name = self.name;

  if (stereotype != "") {
    result.generate = false;
 
	  // Cameo "Applied stereotype"
    for (rels in self.getTargetDirectedRelationships()) {
      for (rel in rels.getRelatedElements()) {
        if (rel.name == stereotype) {
          result.generate = true;
        }
      }  
    }
  } else {
    result.generate = true;
  }

  result.region = sm.regions.first.getModel(result);
  return result;
}

operation Region getModel(sm : Tuple) : Tuple {
  var result = new Tuple();
  result.states = new List();
  result.initial_state_id = null;
  result.initial_history = false;

  // Initial state
  var initial = self.subvertices.select(s | s.isKindOf(Pseudostate) and ((s.kind = PseudostateKind#initial) or (s.kind = PseudostateKind#shallowHistory))).first;
  if ((initial == null) or (initial.outgoing.first == null)) {
    if (self.state != null) {
      (sm.name + ": Missing initial state in composite state " + self.state.name).errln();
    }
  }
  result.initial_state_id = initial.outgoing.first.target.id;
  result.initial_history = (initial.kind = PseudostateKind#shallowHistory);

  // States in region
  for (state in self.subvertices.select(s | s.isKindOf(State))) {
    result.states.add(state.getModel(sm));
  }

  return result;
}

operation Behavior getBody() : String {
  if (self.isKindOf(OpaqueBehavior) and (self.bodies.first != null) and (self.bodies.first != "")) {
    return self.bodies.first;
  } else {
    return self.name;
  }
}

operation State getModel(sm : Tuple) : Tuple {
  var result = new Tuple();
  result.region = null;
  result.parent_state_id = null;
  result.entry = null;
  result.exit = null;
  result.transitions_for_trigger = new Map();
  result.name = self.name;
  result.id = self.id;

  // Parent state
  if (self.container.state != null) {
    result.parent_state_id = self.container.state.id;
  }

  // Entry/exit actions 
  if (self.entry != null) {
    result.entry = self.entry.getBody();
  }
  if (self.exit != null) {
    result.exit = self.exit.getBody();
  }
  
  // Subregions 
  if (not self.regions.isEmpty()) {
    result.region = self.regions.first.getModel(sm);
  }

  // Transitions
  for (xmi_transition in self.outgoing) {
    var transition = xmi_transition.getModel(sm, result);

    if (not result.transitions_for_trigger.containsKey(transition.trigger)) {
      result.transitions_for_trigger.put(transition.trigger, new List());
    }
    result.transitions_for_trigger.get(transition.trigger).add(transition);
  }
    
  return result;
}

operation Transition getModel(sm : Tuple, state : Tuple) : Tuple {
  var result = new Tuple();
  result.actions = new List();
  result.guards = new List();
  result.all_transitions = new List();
  result.target_state_id = null;
  result.trigger = null;
  result.start = state.name;
  result.internal = (self.kind != TransitionKind#external);

  // Trigger
  if (self.trigger.isDefined() and (self.trigger != null) and (self.trigger.first != null)) {
    var trigger = self.trigger.first.event;
    if (trigger.isKindOf(SignalEvent) and (trigger.signal != null)) {
      result.trigger = trigger.signal.name;
    } else {
      result.trigger = trigger.name;
    }
  }

  // Actions
  if (self.effect.isDefined() and (self.effect != null)) {
    result.actions.add(self.effect.getBody());
  }

  // Guard
  if (self.guard.isDefined() and (self.guard != null)) {
    var guard = "else";
    if (self.guard.specification.isDefined() and self.guard.specification.isKindOf(OpaqueExpression)) {
      guard = self.guard.specification.bodies.first;
    } else {
      guard = self.guard.name;
    }
    if (guard != "else") {
      result.guards.add(guard.trim());
    }
  }

  // Target state
  if (self.target.isKindOf(State)) {
    result.target_state_id = self.target.id;
  }

  // Choice/Junction state
  if ((self.target.isKindOf(Pseudostate)) and ((self.target.kind = PseudostateKind#choice) or (self.target.kind = PseudostateKind#junction))) {
    for (xmi_choice_transition in self.target.outgoing) {
      result.all_transitions.add(xmi_choice_transition.getModel(sm, state));
    }
  }

  return result;
}
%]