[%
// Parse model and transform it to model-independent Tuples (TODO: Use Emfatic)

operation StateMachine getModel() : Tuple {
  var result = new Tuple();
  result.name = self.name;
  result.region = sm.regions.first.getModel(result);
  return result;
}

operation Region getModel(sm : Tuple) : Tuple {
  var result = new Tuple();

  var initial = self.subvertices.select(s | s.isKindOf(Pseudostate) and ((s.kind = PseudostateKind#initial) or (s.kind = PseudostateKind#shallowHistory))).first;
  if ((initial == null) or (initial.outgoing.first == null)) {
  	if (self.state != null) {
      (sm.name + ": Missing initial state in composite state " + self.state.name).println();
    }
  }
  result.initial_id = initial.outgoing.first.target.id;
  result.initial_history = (initial.kind = PseudostateKind#shallowHistory);

  result.states = new List();
  for (state in self.subvertices.select(s | s.isKindOf(State))) {
    result.states.add(state.getModel(sm));
  }

  return result;
}

operation Behavior getBody() : String {
  if (self.isKindOf(OpaqueBehavior) and (self.bodies.first != null) and (self.bodies.first != "")) {
    return self.bodies.first;
  } else {
    return self.name;
  }
}

operation State getModel(sm : Tuple) : Tuple {
  var result = new Tuple();
  result.name = self.name;
  result.id = self.id;
  result.region = null;

  if (self.container.state != null) {
  	result.parent_state_id = self.container.state.id;
  }
  
  if (self.entry != null) {
  	result.entry = self.entry.getBody();
  }

  if (self.exit != null) {
  	result.exit = self.exit.getBody();
  }
  
  if (not self.regions.isEmpty()) {
    result.region = self.regions.first.getModel(sm);
  }

  result.transitions = new List();
  for (transition in self.outgoing.sortBy(t | t.getSortKey())) {
    transition.getModel(sm, result, result.transitions);
  }
    
  return result;
}

operation Transition getModel(sm : Tuple, state : Tuple, transitions : List) : Tuple {
  var result = new Tuple();
  result.start = state.name;
  result.internal = (self.kind != TransitionKind#external);
  var trigger = self.trigger.first.event;
  if (trigger.isKindOf(SignalEvent) and (trigger.signal != null)) {
    result.trigger = trigger.signal.name;
  } else {
    result.trigger = trigger.name;
  }
  result.actions = new List();
  result.guards = new List();

  self.getTarget(sm, result, transitions);
  return result;
}

operation Constraint getGuard() : String {
  var guard = "else";
  if ((self.specification != null) and self.specification.isKindOf(OpaqueExpression)) {
    guard = self.specification.bodies.first;
  } else {
    guard = self.name;
  }
  return guard;
}

operation Transition getTarget(sm : Tuple, transition : Tuple, transitions : List) {
  if (self.effect != null) {
    transition.actions.add(self.effect.getBody());
  }
  if (self.guard != null) {
    var guard = self.guard.getGuard();
    if (guard != "else") {
      transition.guards.add(guard);
    }
  }

  if (self.target.isKindOf(State)) {
    transition.target_state_id = self.target.id;
    transitions.add(transition);
  }

  if ((self.target.isKindOf(Pseudostate)) and (self.target.kind = PseudostateKind#choice)) {
    for (choice_transition in self.target.outgoing.sortBy(t | t.getSortKey())) {
      var t = new Tuple();
      t.start = transition.start;
      t.trigger = transition.trigger;
      t.internal = transition.internal;
      t.actions = transition.actions.clone();
      t.guards = transition.guards.clone();
      choice_transition.getTarget(sm, t, transitions);
    }
  }
}

operation Transition getSortKey() : String {
  if (self.guard = null) {
    return "999999-";
  }

  var guard = self.guard.getGuard();
  if (guard != "else") {
    return "0" + guard;
  }
  return "999999-else";
}
%]